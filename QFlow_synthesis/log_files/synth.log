Qflow synthesis logfile created on Wed 09 Apr 2025 11:27:08 PM PDT
Running yosys for verilog parsing and synthesis
yosys  -s sig_control.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `sig_control.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/robot/opensource/vsdflow/source/sig_control.v
Parsing Verilog input from `/home/robot/opensource/vsdflow/source/sig_control.v' to AST representation.
Generating RTLIL representation for module `\sig_control'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \sig_control

3.1.2. Analyzing design hierarchy..
Top module:  \sig_control
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5 in module sig_control.
Marked 2 switch rules as full_case in process $proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3 in module sig_control.
Marked 1 switch rules as full_case in process $proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2 in module sig_control.
Marked 1 switch rules as full_case in process $proc$/home/robot/opensource/vsdflow/source/sig_control.v:24$1 in module sig_control.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \clear in `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3'.
Found async reset \clear in `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:24$1'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5'.
     1/9: $6\next_state[2:0]
     2/9: $5\next_state[2:0]
     3/9: $4\next_state[2:0]
     4/9: $3\next_state[2:0]
     5/9: $2\next_state[2:0]
     6/9: $1\next_state[2:0]
     7/9: $1\delay_en[0:0]
     8/9: $0\next_state[2:0]
     9/9: $0\delay_en[0:0]
Creating decoders for process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3'.
     1/1: $0\delay_count[1:0]
Creating decoders for process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2'.
     1/4: $1\cntry[1:0]
     2/4: $1\hwy[1:0]
     3/4: $0\cntry[1:0]
     4/4: $0\hwy[1:0]
Creating decoders for process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:24$1'.
     1/1: $0\state[2:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\sig_control.\delay_en' from process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5'.
No latch inferred for signal `\sig_control.\next_state' from process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5'.
No latch inferred for signal `\sig_control.\hwy' from process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2'.
No latch inferred for signal `\sig_control.\cntry' from process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sig_control.\delay_count' using process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3'.
  created $adff cell `$procdff$75' with positive edge clock and positive level reset.
Creating register for signal `\sig_control.\state' using process `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:24$1'.
  created $adff cell `$procdff$76' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5'.
Removing empty process `sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:54$5'.
Found and cleaned up 1 empty switch in `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3'.
Removing empty process `sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:44$3'.
Found and cleaned up 1 empty switch in `\sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2'.
Removing empty process `sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:32$2'.
Removing empty process `sig_control.$proc$/home/robot/opensource/vsdflow/source/sig_control.v:24$1'.
Cleaned up 8 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.
<suppressed ~3 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 25 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module sig_control..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$28.
    dead port 2/2 on $mux $procmux$37.
    dead port 2/2 on $mux $procmux$47.
    dead port 2/2 on $mux $procmux$13.
    dead port 2/2 on $mux $procmux$20.
Removed 5 multiplexer ports.
<suppressed ~5 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
    New ctrl vector for $pmux cell $procmux$57: $auto$opt_reduce.cc:132:opt_mux$78
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$77: { $procmux$14_CMP $procmux$29_CMP $procmux$38_CMP }
  Optimizing cells in module \sig_control.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell sig_control.$add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4 ($add).
Removed top 30 bits (of 32) from port Y of cell sig_control.$add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4 ($add).
Removed top 30 bits (of 32) from port B of cell sig_control.$ge$/home/robot/opensource/vsdflow/source/sig_control.v:74$7 ($ge).
Removed top 30 bits (of 32) from port B of cell sig_control.$ge$/home/robot/opensource/vsdflow/source/sig_control.v:66$6 ($ge).
Removed top 1 bits (of 3) from port B of cell sig_control.$procmux$21_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell sig_control.$procmux$26 ($mux).
Removed top 1 bits (of 3) from port B of cell sig_control.$procmux$29_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell sig_control.$procmux$35 ($mux).
Removed top 2 bits (of 3) from port B of cell sig_control.$procmux$38_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell sig_control.$procmux$45 ($mux).
Removed top 2 bits (of 3) from wire sig_control.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire sig_control.$3\next_state[2:0].
Removed top 30 bits (of 32) from wire sig_control.$add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~100 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sig_control:
  creating $macc model for $add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4 ($add).
  creating $alu model for $macc $add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4.
  creating $alu model for $ge$/home/robot/opensource/vsdflow/source/sig_control.v:66$6 ($ge): new $alu
  creating $alu model for $ge$/home/robot/opensource/vsdflow/source/sig_control.v:74$7 ($ge): new $alu
  creating $alu cell for $ge$/home/robot/opensource/vsdflow/source/sig_control.v:74$7: $auto$alumacc.cc:474:replace_alu$84
  creating $alu cell for $ge$/home/robot/opensource/vsdflow/source/sig_control.v:66$6: $auto$alumacc.cc:474:replace_alu$93
  creating $alu cell for $add$/home/robot/opensource/vsdflow/source/sig_control.v:48$4: $auto$alumacc.cc:474:replace_alu$102
  created 3 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$89: { $auto$alumacc.cc:490:replace_alu$85 [0] $auto$alumacc.cc:490:replace_alu$85 [1] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$98: { $auto$alumacc.cc:490:replace_alu$94 [0] $auto$alumacc.cc:490:replace_alu$94 [1] }
  Optimizing cells in module \sig_control.
Performed a total of 2 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register sig_control.state.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\sig_control'.
  found $adff cell for state register: $procdff$76
  root of input selection tree: \next_state
  found reset state: 3'000 (from async reset)
  found ctrl input: $procmux$14_CMP
  found ctrl input: $procmux$21_CMP
  found ctrl input: $procmux$29_CMP
  found ctrl input: $procmux$38_CMP
  found ctrl input: $procmux$48_CMP
  found ctrl input: $auto$rtlil.cc:1836:ReduceOr$101
  found state code: 3'100
  found ctrl input: \X
  found state code: 3'011
  found ctrl input: $auto$rtlil.cc:1836:ReduceOr$92
  found state code: 3'010
  found state code: 3'001
  found ctrl output: $procmux$14_CMP
  found ctrl output: $procmux$21_CMP
  found ctrl output: $procmux$29_CMP
  found ctrl output: $procmux$38_CMP
  found ctrl output: $procmux$48_CMP
  ctrl inputs: { $auto$rtlil.cc:1836:ReduceOr$92 $auto$rtlil.cc:1836:ReduceOr$101 \X }
  ctrl outputs: { $procmux$48_CMP $procmux$38_CMP $procmux$29_CMP $procmux$21_CMP $procmux$14_CMP \next_state }
  transition:      3'000 3'--0 ->      3'000 8'10000000
  transition:      3'000 3'--1 ->      3'001 8'10000001
  transition:      3'100 3'-0- ->      3'100 8'00001100
  transition:      3'100 3'-1- ->      3'000 8'00001000
  transition:      3'010 3'0-- ->      3'010 8'00100010
  transition:      3'010 3'1-- ->      3'011 8'00100011
  transition:      3'001 3'-0- ->      3'001 8'01000001
  transition:      3'001 3'-1- ->      3'010 8'01000010
  transition:      3'011 3'--0 ->      3'100 8'00010100
  transition:      3'011 3'--1 ->      3'011 8'00010011

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$105' from module `\sig_control'.

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 12 unused cells and 12 unused wires.
<suppressed ~13 debug messages>

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$105' from module `\sig_control'.
  Removing unused output signal \next_state [0].
  Removing unused output signal \next_state [1].
  Removing unused output signal \next_state [2].

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$105' from module `\sig_control' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ----1
  100 -> ---1-
  010 -> --1--
  001 -> -1---
  011 -> 1----

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$105' from module `\sig_control':
-------------------------------------

  Information on FSM $fsm$\state$105 (\state):

  Number of input signals:    3
  Number of output signals:   5
  Number of state bits:       5

  Input signals:
    0: \X
    1: $auto$rtlil.cc:1836:ReduceOr$101
    2: $auto$rtlil.cc:1836:ReduceOr$92

  Output signals:
    0: $procmux$14_CMP
    1: $procmux$21_CMP
    2: $procmux$29_CMP
    3: $procmux$38_CMP
    4: $procmux$48_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 3'--0   ->     0 5'10000
      1:     0 3'--1   ->     3 5'10000
      2:     1 3'-1-   ->     0 5'00001
      3:     1 3'-0-   ->     1 5'00001
      4:     2 3'0--   ->     2 5'00100
      5:     2 3'1--   ->     4 5'00100
      6:     3 3'-1-   ->     2 5'01000
      7:     3 3'-0-   ->     3 5'01000
      8:     4 3'--0   ->     1 5'00010
      9:     4 3'--1   ->     4 5'00010

-------------------------------------

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$105' from module `\sig_control'.

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.
<suppressed ~10 debug messages>

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.
<suppressed ~1 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
    New input vector for $reduce_or cell $auto$fsm_map.cc:144:implement_pattern_cache$142: { $auto$fsm_map.cc:118:implement_pattern_cache$136 $auto$fsm_map.cc:118:implement_pattern_cache$140 }
  Optimizing cells in module \sig_control.
Performed a total of 1 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~212 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.
<suppressed ~36 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 4 unused cells and 125 unused wires.
<suppressed ~5 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\sig_control' to `<abc-temp-dir>/input.blif'..
Extracted 44 gates and 54 wires to a netlist network with 8 inputs and 11 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI4 cells:        5
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:        internal signals:       35
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:       11
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 45 unused wires.
<suppressed ~2 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \sig_control

3.25.2. Analyzing design hierarchy..
Top module:  \sig_control
Removed 0 unused modules.

3.26. Printing statistics.

=== sig_control ===

   Number of wires:                 29
   Number of wire bits:             37
   Number of public wires:           7
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_ANDNOT_                       6
     $_AND_                          1
     $_AOI3_                         1
     $_DFF_PP0_                      6
     $_DFF_PP1_                      1
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          6
     $_OAI4_                         5
     $_ORNOT_                        3

3.27. Executing CHECK pass (checking for obvious problems).
checking module sig_control..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\sig_control':
  mapped 6 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 1 $_DFF_PP1_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\sig_control' to `<abc-temp-dir>/input.blif'..
Extracted 28 gates and 37 wires to a netlist network with 9 inputs and 12 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             BUFX2 cells:        4
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       12
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 37 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port sig_control.X: Missing option -inpad.
Don't map input port sig_control.clear: Missing option -inpad.
Don't map input port sig_control.clock: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sig_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sig_control.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sig_control'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sig_control..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sig_control.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== sig_control ===

   Number of wires:                 27
   Number of wire bits:             35
   Number of public wires:          27
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     AND2X2                          1
     AOI21X1                         1
     AOI22X1                         1
     BUFX2                           4
     DFFSR                           7
     INVX1                           9
     NAND2X1                         3
     NOR2X1                          1
     OAI22X1                         5

End of script. Logfile hash: 025e86a5cd
CPU: user 0.19s system 0.04s, MEM: 17.53 MB total, 11.88 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 15% 19x opt_clean (0 sec), 14% 1x share (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl sig_control_mapped.blif sig_control /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I sig_control_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif sig_control.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 7 (load 261.901) from node _6_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.54776 (latency = 509.551 ps)
Top input node fanout is 7 (load 94.1283) from node clock.
Warning 1: load of 230.618 is 2.24092 times greater than strongest gate DFFSR
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 234.345 is 2.27714 times greater than strongest gate DFFSR
7 gates exceed specified minimum load.
0 buffers were added.
2 gates were changed.

Gate counts by drive strength:

	"" gates	In: 7    	Out: 7    	+0
	"1" gates	In: 20    	Out: 18    	-2
	"2" gates	In: 5    	Out: 6    	+1

Number of gates changed: 2
gates resized: 2
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 7 (load 307.148) from node _6_,
driven by INVX4 with strength 417.401 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.17997 (latency = 435.993 ps)
Top input node fanout is 7 (load 94.1283) from node clock.
Warning 1: load of 230.618 is 2.24092 times greater than strongest gate DFFSR
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 234.345 is 2.27714 times greater than strongest gate DFFSR
7 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 7    	Out: 7    	+0
	"1" gates	In: 18    	Out: 18    	+0
	"2" gates	In: 6    	Out: 6    	+0
	"4" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/robot/opensource/vsdflow/synthesis
Files:
   Verilog: /home/robot/opensource/vsdflow/synthesis/sig_control.rtl.v
   Verilog: /home/robot/opensource/vsdflow/synthesis/sig_control.rtlnopwr.v
   Verilog: /home/robot/opensource/vsdflow/synthesis/sig_control.rtlbb.v
   Spice:   /home/robot/opensource/vsdflow/synthesis/sig_control.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" sig_control.spc sig_control.xspice

Synthesis script ended on Wed 09 Apr 2025 11:27:09 PM PDT
